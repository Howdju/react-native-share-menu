//
//  ReactShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 29/07/2020.
//

import OSLog

import RNShareMenu

class ReactShareViewController: ShareViewController, RCTBridgeDelegate, ReactShareViewDelegate {
  private static let logger = Logger(
    subsystem: Bundle.main.bundleIdentifier!,
    category: String(describing: ShareViewController.self)
  )

  func sourceURL(for bridge: RCTBridge!) -> URL! {
#if DEBUG
    return RCTBundleURLProvider.sharedSettings()?
      .jsBundleURL(forBundleRoot: "index.share", fallbackResource: nil)
#else
    return Bundle.main.url(forResource: "main", withExtension: "jsbundle")
#endif
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()

    let bridge: RCTBridge! = RCTBridge(delegate: self, launchOptions: nil)
    let rootView = RCTRootView(
      bridge: bridge,
      moduleName: "ShareMenuModuleComponent",
      initialProperties: nil
    )

    rootView.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 1)
    backgroundColorSetup: if let backgroundColorConfig = Bundle.main.infoDictionary?[REACT_SHARE_VIEW_BACKGROUND_COLOR_KEY] as? [String:Any] {
      if let transparent = backgroundColorConfig[COLOR_TRANSPARENT_KEY] as? Bool, transparent {
        rootView.backgroundColor = nil
        break backgroundColorSetup
      }

      let red = backgroundColorConfig[COLOR_RED_KEY] as? Float ?? 1
      let green = backgroundColorConfig[COLOR_GREEN_KEY] as? Float ?? 1
      let blue = backgroundColorConfig[COLOR_BLUE_KEY] as? Float ?? 1
      let alpha = backgroundColorConfig[COLOR_ALPHA_KEY] as? Float ?? 1

      rootView.backgroundColor = UIColor(red: CGFloat(red), green: CGFloat(green), blue: CGFloat(blue), alpha: CGFloat(alpha))
    }

    self.view = rootView

    ShareMenuReactView.attachViewDelegate(self)
  }

  override func viewDidDisappear(_ animated: Bool) {
    cancel()
    ShareMenuReactView.detachViewDelegate()
  }

  func dismissExtension(_ errorMessage: String?) {
    guard let extensionContext = self.extensionContext else {
      Self.logger.error("Cannot dismissExtension because there is no extensionContext.")
      return
    }
    
    if errorMessage != nil {
      extensionContext.cancelRequest(withError: RNSMError(errorMessage!))
      return
    }
    
    extensionContext.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func getShareData(_ completion: @escaping (Result<ShareData, Error>) -> Void) {
    guard let extensionContext = self.extensionContext else {
      completion(.failure(RNSMError("Cannot getShareData because there is no extensionContext")))
      return
    }
    guard let extensionItems = extensionContext.inputItems as? [NSExtensionItem] else {
      completion(.failure(RNSMError("Cannot getShareData because there is no extensionContext")))
      return
    }

    Task {
      do {
        let shareData = try await ShareDataExtractor.extractShareData(extensionItems)
        completion(.success(shareData))
      } catch {
        completion(.failure(error))
      }
    }
  }

  func openApp() {
    super.openHostApp()
  }

  func continueInApp(with extraData: [String: Any]?) {
      handlePost(with: extraData)
  }
}
